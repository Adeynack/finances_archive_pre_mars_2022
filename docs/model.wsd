@startuml Model

hide empty methods
hide circle

package Organisation {
  class Book {
    name
    default_currency_iso_code: string{3}
  }
  Book "owner" --* User

  class User {
    email
    display_name
    password_digest
  }

  class BookRole {
    role: owner | admin | writer | reader
  }
  BookRole --* Book
  BookRole --* User
}

package "Register" {
  enum RegisterType < PG Enum > {
    Bank
    Card
    Investment
    Asset
    Liability
    Loan
    Other
    Person
    Expense
    Income
  }

  class Register {
    * name
    * starts_at
    * currency_iso_code: string{3}
    * initial_balance: integer = 0
    * active: boolean = true
    group: string
    info: JSON
    notes: text
  }
  Register --* Book
  Register "parent" --o Register
  Register "default category" --o Register
  Register "* type" --* RegisterType

  package Categories {
    class Expense < STI > {}
    Expense --|> Register

    class Income < STI > {}
    Income --|> Register
  }

  package Accounts {
    class Asset < STI > {}
    Asset --|> Register

    class Bank < STI > {}
    Bank --|> Register

    class BankInfo < Store > {
      account_number: String
      iban: String
    }
    BankInfo o-- Bank

    class Card < STI > {}
    Card --|> Register

    class CardInfo < Store > {
      account_number: String
      iban: String
      interest_rate: Float
      credit_limit: Integer
      card_number: String
      expires_at: DateTime 
    }
    CardInfo o-- Card

    class Investment < STI > {}
    Investment --|> Register

    class InvestmentInfo < Store > {
      account_number: String
    }
    InvestmentInfo o-- Investment

    class Liability < STI > {}
    Liability --|> Register

    class Loan < STI > {}
    Loan --|> Register

    class Other < STI > {}
    Other --|> Register

    class Person < STI > {}
    Person --|> Register

    class PersonInfo < Store > {
      name: String
      iban: String
    }
    PersonInfo o-- Person
  }
}

package Transaction {
  enum TransactionStatus < PG Enum > {
    Uncleared
    Reconciling
    Cleared
  }

  class Transaction {
    * date: DateTime
    cheque: String
    * description
    memo
  }
  Transaction "* origin" --|> Register

  class Split {
    * amount: Integer
    memo
  }
  Transaction "1..n" --* Split
  Split "* destination" --* Register
  Split "* status" --* TransactionStatus
}

package Reminders {
  enum ReminderNature < PG Enum > {
    Reminder
    AutoCommit
    AutoCancel
  }

  class Reminder {
    * title
    description
    * from: DateTime
    until: DateTime
    recurrence: String < Montrose >
    transaction_description
    
  }
  Reminder "* nature" *-- ReminderNature
  Reminder "* origin" --* Register

  class ReminderSplit {
    * amount: Integer
    memo
  }
  Reminder "1..n" --* ReminderSplit
  ReminderSplit "* destination" --* Register
  ReminderSplit "* status" --* TransactionStatus
}

package "Applicable to all elements" {
  class Tag {
    * name 
  }

  class Tagging {
    * subject_type
    * subject_id
  }
  Tagging --* Tag

  class ImportOrigin {
    * subject_id
    * subject_type
    * external_system
    * external_id
  }
}

@enduml
